# üå± Plant AI Disease Detection App

A comprehensive Flutter mobile application that leverages artificial intelligence to detect plant diseases through image analysis, providing farmers and gardeners with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
rs with instant diagnosis and treatment recommendations.

## üì± Overview

This Flutter application combines computer vision, machine learning, and agricultural expertise to help users identify plant diseases quickly and accurately. Users can simply take a photo of their plant, and the AI will analyze the image to detect potential diseases, providing detailed information about causes, symptoms, and treatment options.

## ‚ú® Core Features

### üîç **AI-Powered Disease Detection**

- **Real-time Camera Analysis**: Capture plant images using the device camera
- **Advanced ML Models**: TensorFlow Lite integration for on-device inference
- **High Accuracy**: Trained models for detecting various plant diseases
- **Instant Results**: Get disease diagnosis within seconds

### üìö **Comprehensive Plant Library**

- **Extensive Database**: Browse detailed information about various crops
- **Disease Catalog**: Complete database of plant diseases with symptoms
- **Scientific Information**: Scientific names, families, and origins
- **Growing Guides**: Seasonal information and growing conditions

### ü©∫ **Detailed Disease Information**

- **Expandable Sections**: Collapsible causes and treatment information
- **Database Integration**: Real disease data from Supabase backend
- **Treatment Recommendations**: Specific treatment plans for each disease
- **Prevention Tips**: Proactive measures to prevent disease occurrence

### üå§Ô∏è **Weather Integration**

- **Location-based Weather**: Current weather conditions for your area
- **Agricultural Insights**: Weather impact on plant health
- **Smart Recommendations**: Weather-based care suggestions

### üë§ **User Authentication**

- **Secure Login**: Supabase authentication integration
- **User Profiles**: Personalized experience and history
- **Data Sync**: Cross-device synchronization of user data

### üé® **Modern UI/UX**

- **Material Design**: Clean, intuitive interface
- **Responsive Layout**: Optimized for various screen sizes
- **Smooth Animations**: Enhanced user experience with fluid transitions
- **Accessibility**: Built with accessibility best practices

## üõ†Ô∏è Technical Stack

### **Frontend**

- **Framework**: Flutter 3.24.5
- **Language**: Dart 3.5.4
- **State Management**: Provider pattern
- **Navigation**: GoRouter for declarative routing
- **UI Components**: Material Design 3

### **Backend & Database**

- **Backend**: Supabase (PostgreSQL)
- **Authentication**: Supabase Auth
- **Real-time Data**: Supabase Realtime
- **File Storage**: Supabase Storage

### **AI & Machine Learning**

- **ML Framework**: TensorFlow Lite
- **Image Processing**: Camera plugin with ML integration
- **Model Format**: .tflite models for on-device inference

### **External Services**

- **Weather API**: OpenWeatherMap integration
- **Location Services**: Geolocator for GPS functionality
- **Permissions**: Camera, location, and storage permissions

### **Development Tools**

- **IDE**: Android Studio / VS Code
- **Version Control**: Git
- **Package Manager**: Pub (Flutter's package manager)
- **Build System**: Flutter build system

## üìã Prerequisites

Before running this application, ensure you have the following installed:

### **Required Software**
- **Flutter SDK**: Version 3.24.5 or higher
- **Dart SDK**: Version 3.5.4 or higher (included with Flutter)
- **Android Studio**: Latest version with Android SDK
- **Git**: For version control

### **Platform-Specific Requirements**

#### **For Android Development**
- **Android SDK**: API level 21 (Android 5.0) or higher
- **Android Emulator**: Or physical Android device
- **Java Development Kit (JDK)**: Version 11 or higher

#### **For iOS Development** (macOS only)
- **Xcode**: Latest version
- **iOS Simulator**: Or physical iOS device
- **CocoaPods**: For iOS dependency management

### **External Services Setup**
- **Supabase Account**: For backend services
- **OpenWeatherMap API Key**: For weather integration
- **TensorFlow Lite Models**: Pre-trained disease detection models

## üöÄ Installation & Setup

### **1. Clone the Repository**
```bash
git clone <repository-url>
cd plant_ai_disease_flutter
```

### **2. Install Flutter Dependencies**
```bash
flutter pub get
```

### **3. Environment Configuration**
Create a `.env` file in the root directory based on `.env.example`:
```bash
cp .env.example .env
```

Edit the `.env` file with your configuration:
```env
# Supabase Configuration
SUPABASE_URL=your_supabase_project_url
SUPABASE_ANON_KEY=your_supabase_anon_key

# Weather API Configuration
OPENWEATHER_API_KEY=your_openweather_api_key

# App Configuration
APP_NAME=Plant AI Disease Detection
DEBUG_MODE=true
```
